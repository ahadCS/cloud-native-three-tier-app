trigger: none        # do not auto-trigger on commits
pr: none             # do not auto-trigger on PRs

variables:
  AZURE_SERVICE_CONNECTION: 'azure-connection'
  DOCKER_CONNECTION: 'dockerhub_connection'
  dockerHubUsername: 'ahad8'
  IMAGE_NAME: 'frontendim'
  TAG: '$(Build.BuildId)'
  RESOURCE_GROUP: 'devops2-group3-main-rg'
  AKS_CLUSTER_NAME: 'devops2-group3-main-aks'
  K8S_DIR: 'manifests/kubernetes'
  NAMESPACE: 'capstone-project'

pool:
  vmImage: 'ubuntu-latest'

stages:

# === Stage: Deploy to AKS ===
- stage: Deploy
  displayName: 'Deploy Frontend to AKS'
  dependsOn: Build
  jobs:
  - job: Deploy
    displayName: 'Apply Kubernetes Manifests'
    steps:
      - checkout: self

      - task: AzureCLI@2
        displayName: 'Get AKS Credentials'
        inputs:
          azureSubscription: '$(AZURE_SERVICE_CONNECTION)'
          scriptType: bash
          scriptLocation: inlineScript
          inlineScript: |
            az aks get-credentials \
              --resource-group $(RESOURCE_GROUP) \
              --name $(AKS_CLUSTER_NAME) \
              --admin \
              --overwrite-existing
            kubectl config current-context

      - script: |
          kubectl apply -f $(K8S_DIR)/namespace.yml
        displayName: 'Apply Namespace'

      - script: |
          kubectl apply -f $(K8S_DIR)/frontend_cluster_ip.yml
          kubectl apply -f $(K8S_DIR)/frontend_deploy.yml
          kubectl apply -f $(K8S_DIR)/frontend_ingress.yml
        displayName: 'Apply Frontend Manifests'

      - script: |
          echo "Waiting for ingress to be ready..."
          sleep 10
        displayName: 'Wait for Ingress Propagation'

      - script: |
          echo "Checking Pod status..."
          kubectl get pods -n capstone-project -o wide
          kubectl get pods -n ingress-nginx
          kubectl get svc -n capstone-project
          kubectl get svc -n ingress-nginx
          kubectl describe pod frontend-deploy-5f6c48bdc-7k4h9 -n capstone-project
        displayName: 'Check Pod Status'

      - script: |
          echo "Checking Ingress in namespace capstone-project..."
          kubectl get ingress -n capstone-project
        displayName: 'Check Ingress Status'

      - script: |
          echo "Getting Ingress IP..."
          IP=$(kubectl get ingress frontend-ingress -n capstone-project -o jsonpath='{.status.loadBalancer.ingress[0].ip}')
          if [ -z "$IP" ]; then
            echo "Ingress IP not assigned yet."
          else
            echo "Application should be accessible at: http://$IP"
          fi
        displayName: 'Show Ingress External IP'

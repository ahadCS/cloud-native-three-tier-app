trigger: none



variables:
  azureServiceConnection: 'azure-connection'

stages:
- stage: CreateStorage
  displayName: 'Create Storage Backend Resources'
  jobs:
  - job: storage
    displayName: 'Build Storage Account for Terraform Backend'
    pool:
      vmImage: 'ubuntu-latest'

    steps:
    - task: TerraformInstaller@1
      displayName: 'Install Terraform'
      inputs:
        terraformVersion: 'latest'

    - script: |
        terraform init
      displayName: 'Terraform Init (local)'
      workingDirectory: '$(System.DefaultWorkingDirectory)/terraform/storge'

    - task: TerraformTaskV4@4
      displayName: 'Terraform Plan (storage)'
      inputs:
        provider: 'azurerm'
        command: 'plan'
        workingDirectory: '$(System.DefaultWorkingDirectory)/terraform/storge'
        environmentServiceNameAzureRM: '$(azureServiceConnection)'

    - task: TerraformTaskV4@4
      displayName: 'Terraform Apply (storage)'
      inputs:
        provider: 'azurerm'
        command: 'apply'
        workingDirectory: '$(System.DefaultWorkingDirectory)/terraform/storge'
        environmentServiceNameAzureRM: '$(azureServiceConnection)'
        args: '-auto-approve'

- stage: DeployApp
  displayName: 'Deploy with backend.tf'
  jobs:
  - job: deploy
    pool:
      vmImage: 'ubuntu-latest'

    steps:
    - task: TerraformInstaller@1
      inputs:
        terraformVersion: 'latest'

    - task: TerraformTaskV4@4
      displayName: 'Terraform Init'
      inputs:
        provider: 'azurerm'
        command: 'init'
        backendServiceArm: '$(azureServiceConnection)'
        backendAzureRmResourceGroupName: 'devops2-group3-storge-rg'
        backendAzureRmStorageAccountName: 'devops2group3storge'
        backendAzureRmContainerName: 'tfstate'
        backendAzureRmKey: 'Final-project/terraform.tfstate'
        workingDirectory: '$(System.DefaultWorkingDirectory)/terraform/solution'

    - task: TerraformTaskV4@4
      displayName: 'Terraform Plan'
      inputs:
        provider: 'azurerm'
        command: 'plan'
        environmentServiceNameAzureRM: '$(azureServiceConnection)'
        workingDirectory: '$(System.DefaultWorkingDirectory)/terraform/solution'

    - task: TerraformTaskV4@4
      displayName: 'Terraform Apply'
      inputs:
        provider: 'azurerm'
        command: 'apply'
        environmentServiceNameAzureRM: '$(azureServiceConnection)'
        workingDirectory: '$(System.DefaultWorkingDirectory)/terraform/solution'
        args: '-auto-approve'

- stage: DeployMonitoring
  displayName: 'Deploy Ingress, Grafana and Prometheus'
  dependsOn: DeployApp
  jobs:
    - job: deployMonitoring
      pool:
        vmImage: 'ubuntu-latest'

      steps:
        - task: AzureCLI@2
          displayName: 'Configure AKS Credentials'
          inputs:
            azureSubscription: '$(azureServiceConnection)'
            scriptType: 'bash'
            scriptLocation: 'inlineScript'
            inlineScript: |
              echo "Getting AKS credentials..."
              az aks get-credentials \
                --resource-group devops2-group3-main-rg \
                --name devops2-group3-main-aks \
                --overwrite-existing

        - task: AzureCLI@2
          displayName: 'Install NGINX Ingress Controller'
          inputs:
            azureSubscription: '$(azureServiceConnection)'
            scriptType: 'bash'
            scriptLocation: 'inlineScript'
            inlineScript: |
              echo "Installing NGINX Ingress Controller..."
              kubectl apply -f https://raw.githubusercontent.com/kubernetes/ingress-nginx/controller-v1.8.1/deploy/static/provider/cloud/deploy.yaml

              echo "Waiting for ingress controller pods to be ready..."
              kubectl wait --namespace ingress-nginx --for=condition=ready pod --selector=app.kubernetes.io/component=controller --timeout=180s

        - task: AzureCLI@2
          displayName: 'Deploy Monitoring Services and Ingress'
          inputs:
            azureSubscription: '$(azureServiceConnection)'
            scriptType: 'bash'
            scriptLocation: 'inlineScript'
            inlineScript: |
              echo "Applying monitoring services..."
              kubectl apply -f $(System.DefaultWorkingDirectory)/manifests/monitoring/monitoring-services.yml

              echo "Applying ingress configuration..."
              kubectl apply -f $(System.DefaultWorkingDirectory)/manifests/monitoring/ingress.yml

              echo "Waiting for external IP addresses..."
              for i in {1..12}; do
                GRAFANA_IP=$(kubectl get svc grafana-lb -n monitoring -o jsonpath="{.status.loadBalancer.ingress[0].ip}" 2>/dev/null || echo "")
                PROM_IP=$(kubectl get svc prometheus-lb -n monitoring -o jsonpath="{.status.loadBalancer.ingress[0].ip}" 2>/dev/null || echo "")

                if [[ -n "$GRAFANA_IP" && -n "$PROM_IP" ]]; then
                  echo "Found IPs!"
                  echo "Grafana IP: $GRAFANA_IP"
                  echo "Prometheus IP: $PROM_IP"
                  break
                fi

                echo "Retry $i: Waiting for IPs..."
                sleep 10
              done

              if [[ -z "$GRAFANA_IP" || -z "$PROM_IP" ]]; then
                echo "Failed to get LoadBalancer IPs."
                exit 1
              fi

              echo "==========================="
              echo "Grafana URL:     http://$GRAFANA_IP:3000"
              echo "Prometheus URL:  http://$PROM_IP:9090"
              echo "==========================="

              echo "Services in 'monitoring' namespace:"
              kubectl get services -n monitoring

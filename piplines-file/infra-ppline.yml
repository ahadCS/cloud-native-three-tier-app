trigger: none

variables:
  azureServiceConnection: 'azure-connection'

stages:
- stage: CreateStorage
  displayName: 'Create Storage Backend Resources'
  jobs:

  # --- Job 1: Check if Storage Account Exists ---
  - job: CheckStorageAccount
    displayName: 'Check if Storage Account Exists'
    pool:
      vmImage: 'ubuntu-latest'
    steps:
      - task: AzureCLI@2
        name: CheckStorage
        displayName: 'Check Storage Account Existence'
        inputs:
          azureSubscription: '$(azureServiceConnection)'
          scriptType: 'bash'
          scriptLocation: 'inlineScript'
          inlineScript: |
            set -e
            if az storage account show --name devops2group3storge --resource-group devops2-group3-storge-rg &> /dev/null; then
              echo " Storage account already exists."
              echo "##vso[task.setvariable variable=storageExists;isOutput=true]true"
            else
              echo " Storage account does not exist."
              echo "##vso[task.setvariable variable=storageExists;isOutput=true]false"
            fi

  # --- Job 2: Create Storage Only if It Doesn't Exist ---
  - job: storage
    displayName: 'Build Storage Account for Terraform Backend'
    dependsOn: CheckStorageAccount
    condition: eq(dependencies.CheckStorageAccount.outputs['CheckStorage.storageExists'], 'false')
    pool:
      vmImage: 'ubuntu-latest'

    steps:
      - task: TerraformInstaller@1
        displayName: 'Install Terraform'
        inputs:
          terraformVersion: 'latest'

      - script: |
          terraform init
        displayName: 'Terraform Init (local)'
        workingDirectory: '$(System.DefaultWorkingDirectory)/terraform/storge'

      - task: TerraformTaskV4@4
        displayName: 'Terraform Plan (storage)'
        inputs:
          provider: 'azurerm'
          command: 'plan'
          workingDirectory: '$(System.DefaultWorkingDirectory)/terraform/storge'
          environmentServiceNameAzureRM: '$(azureServiceConnection)'

      - task: TerraformTaskV4@4
        displayName: 'Terraform Apply (storage)'
        inputs:
          provider: 'azurerm'
          command: 'apply'
          workingDirectory: '$(System.DefaultWorkingDirectory)/terraform/storge'
          environmentServiceNameAzureRM: '$(azureServiceConnection)'
          args: '-auto-approve'


- stage: DeployApp
  displayName: 'Deploy with backend.tf'
  jobs:
  - job: deploy
    pool:
      vmImage: 'ubuntu-latest'

    steps:
    - task: TerraformInstaller@1
      inputs:
        terraformVersion: 'latest'

    - task: TerraformTaskV4@4
      displayName: 'Terraform Init'
      inputs:
        provider: 'azurerm'
        command: 'init'
        backendServiceArm: '$(azureServiceConnection)'
        backendAzureRmResourceGroupName: 'devops2-group3-storge-rg'
        backendAzureRmStorageAccountName: 'devops2group3storge'
        backendAzureRmContainerName: 'tfstate'
        backendAzureRmKey: 'terraform.tfstate'
        workingDirectory: '$(System.DefaultWorkingDirectory)/terraform/solution'

    - task: TerraformTaskV4@4
      displayName: 'Terraform Plan'
      inputs:
        provider: 'azurerm'
        command: 'plan'
        environmentServiceNameAzureRM: '$(azureServiceConnection)'
        workingDirectory: '$(System.DefaultWorkingDirectory)/terraform/solution'

    - task: TerraformTaskV4@4
      displayName: 'Terraform Apply'
      inputs:
        provider: 'azurerm'
        command: 'apply'
        environmentServiceNameAzureRM: '$(azureServiceConnection)'
        workingDirectory: '$(System.DefaultWorkingDirectory)/terraform/solution'
        args: '-auto-approve'
        # ====================== STAGE 3: Deploy Ingress Controller ======================
- stage: DeployIngress
  displayName: 'Step 3: Deploy Ingress Controller + Print IP'
  dependsOn: DeployApp
  jobs:
  - job: deployIngress
    displayName: 'Install Ingress Controller'
    pool:
      vmImage: 'ubuntu-latest'
    steps:
    - script: |
        echo "Installing Helm..."
        curl https://raw.githubusercontent.com/helm/helm/main/scripts/get-helm-3 | bash
      displayName: 'Install Helm CLI'

    - task: AzureCLI@2
      displayName: 'Install Ingress NGINX Controller'
      inputs:
        azureSubscription: '$(azureServiceConnection)'
        scriptType: 'bash'
        scriptLocation: 'inlineScript'
        inlineScript: |
          az aks get-credentials --resource-group devops2-group3-main-rg --name devops2-group3-main-aks --overwrite-existing

          helm repo add ingress-nginx https://kubernetes.github.io/ingress-nginx
          helm repo update

          helm install nginx-ingress ingress-nginx/ingress-nginx \
            --namespace ingress-nginx \
            --create-namespace \
            --set controller.ingressClassResource.name=nginx \
            --set controller.ingressClassResource.controllerValue=k8s.io/ingress-nginx \
            --set controller.service.type=LoadBalancer

          echo "Waiting for External IP..."
          for i in {1..12}; do
            IP=$(kubectl get svc nginx-ingress-ingress-nginx-controller -n ingress-nginx -o jsonpath='{.status.loadBalancer.ingress[0].ip}' 2>/dev/null || echo "")
            if [[ -n "$IP" ]]; then
              echo "🌐 Ingress External IP: http://$IP"
              break
            fi
            echo "Retry $i: Waiting for IP..."
            sleep 10
          done

# ====================== STAGE 4: Deploy Monitoring ======================
- stage: DeployMonitoring
  displayName: 'Step 4: Deploy Monitoring (Prometheus + Grafana)'
  dependsOn: DeployIngress
  jobs:
  - job: deployMonitoring
    displayName: 'Install Monitoring Stack via Helm'
    pool:
      vmImage: 'ubuntu-latest'
    steps:
    - script: |
        echo "Installing Helm..."
        curl https://raw.githubusercontent.com/helm/helm/main/scripts/get-helm-3 | bash

        echo "Add Prometheus Helm repo"
        helm repo add prometheus-community https://prometheus-community.github.io/helm-charts
        helm repo update
      displayName: 'Install Helm CLI and Add Prometheus Repo'

    - task: AzureCLI@2
      displayName: 'Install kube-prometheus-stack + Print IPs'
      inputs:
        azureSubscription: '$(azureServiceConnection)'
        scriptType: 'bash'
        scriptLocation: 'inlineScript'
        inlineScript: |
          az aks get-credentials --resource-group devops2-group3-main-rg --name devops2-group3-main-aks --overwrite-existing

          helm install monitoring prometheus-community/kube-prometheus-stack \
            --namespace monitoring \
            --create-namespace \
            --set grafana.service.type=LoadBalancer \
            --set prometheus.service.type=LoadBalancer \
            --set grafana.adminPassword='admin123'

          echo "Waiting for services to initialize..."
          for i in {1..12}; do
            GRAFANA_IP=$(kubectl get svc -n monitoring kube-prometheus-stack-grafana -o jsonpath='{.status.loadBalancer.ingress[0].ip}' 2>/dev/null || echo "")
            PROMETHEUS_IP=$(kubectl get svc -n monitoring kube-prometheus-stack-prometheus -o jsonpath='{.status.loadBalancer.ingress[0].ip}' 2>/dev/null || echo "")
            if [[ -n "$GRAFANA_IP" && -n "$PROMETHEUS_IP" ]]; then
              echo "📊 Grafana URL:     http://$GRAFANA_IP:3000"
              echo "📈 Prometheus URL: http://$PROMETHEUS_IP:9090"
              break
            fi
            echo "Retry $i: Waiting for IPs..."
            sleep 10
          done

          echo "Check all monitoring pods:"
          kubectl get pods -n monitoring || echo "Monitoring pods not found"

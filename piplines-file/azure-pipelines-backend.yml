trigger: none        # do not auto-trigger on commits
pr: none             # do not auto-trigger on PRs

variables:
  AZURE_SERVICE_CONNECTION: 'azure-connection'         # name of Service Connection
  DOCKER_CONNECTION: 'dockerhub_connection'              # Docker Registry service connection
  dockerHubUsername: 'ahad8'                             # Docker Hub username
  IMAGE_NAME: 'backend'                                 # repo name on Docker Hub
  TAG: '$(Build.BuildId)'                                # image tag based on build ID
  RESOURCE_GROUP:     'devops2-group3-main-rg'   # RG that contains AKS
  AKS_CLUSTER_NAME:   'devops2-group3-main-aks'  #  AKS cluster name
  K8S_DIR:            'manifests/kubernetes'                        # path to K8s manifests
  NAMESPACE:          'capstone-project'                      


pool:
  vmImage: 'ubuntu-latest'

stages:
# === Stage: Build & Push Image to Docker Hub ===
- stage: Build
  displayName: 'Build & Test & Push Backend Image'
  jobs:
  - job: Build
    displayName: 'Build'
    steps:
      - checkout: self

      - task: SonarQubePrepare@5
        displayName: 'Prepare SonarQube Analysis'
        inputs:
          SonarQube: 'sonarqube-b-connection'      #  Service Connection
          scannerMode: 'CLI'
          configMode: 'manual'
          cliProjectKey: 'Authentication-Backend'
          cliProjectName: 'Authentication Backend'
          extraProperties: |
            sonar.projectBaseDir=authentication_app_backend.gr3
            sonar.sources=.


      - task: NodeTool@0
        displayName: 'Install Node.js'
        inputs:
          versionSpec: '18.x'

      - script: |
          cd authentication_app_backend.gr3
          npm install
          npm run build
        displayName: 'Build Backend'
        
      - task: SonarQubeAnalyze@5
        displayName: 'Run SonarQube Analysis'

      - task: SonarQubePublish@5
        displayName: 'Publish SonarQube Results'
        inputs:
          pollingTimeoutSec: '300'

      - task: Docker@2
        displayName: 'Login to Docker Hub'
        inputs:
          containerRegistry: '$(DOCKER_CONNECTION)'
          command: login

      - task: Docker@2
        displayName: 'Build & Push to Docker Hub'
        inputs:
          containerRegistry: '$(DOCKER_CONNECTION)'
          repository: '$(dockerHubUsername)/$(IMAGE_NAME)'
          command: buildAndPush
          dockerfile: 'authentication_app_backend.gr3/Dockerfile'
          buildContext: 'authentication_app_backend.gr3'
          tags: |
            $(TAG)
            latest
 
# === Stage: Deploy to AKS ===
- stage: Deploy
  displayName: 'Deploy Backend to AKS'
  dependsOn: Build
  jobs:
  - job: Deploy
    displayName: 'Apply Kubernetes Manifests'
    steps:
      - checkout: self

      # Get AKS credentials
      - task: AzureCLI@2
        displayName: 'Get AKS Credentials'
        inputs:
          azureSubscription: '$(AZURE_SERVICE_CONNECTION)'
          scriptType: bash
          scriptLocation: inlineScript
          inlineScript: |
            az aks get-credentials \
              --resource-group $(RESOURCE_GROUP) \
              --name $(AKS_CLUSTER_NAME) \
              --admin \
              --overwrite-existing
            kubectl config current-context

      # Ensure the namespace exists
      - script: |
          kubectl apply -f $(K8S_DIR)/namespace.yml
        displayName: 'Apply Namespace'

      # Apply Deployment and Service manifests
      - script: |
          kubectl apply -f $(K8S_DIR)/backend_deploy.yml
          kubectl apply -f $(K8S_DIR)/backend_cluster_ip.yml
        displayName: 'Apply Backend Deployment & Service'

      - script: |
          echo "Checking Pod status..."
          kubectl get pods -n capstone-project -o wide
          kubectl get pods -n ingress-nginx
          kubectl get svc -n ingress-nginx
        displayName: 'Check Pod Status'
# for check
      - script: |
          echo "Checking Ingress in namespace capstone-project..."
          kubectl get ingress -n capstone-project
        displayName: 'Check Ingress Status'

      - script: |
          echo "Getting Ingress IP..."
          IP=$(kubectl get ingress backend-ingress -n capstone-project -o jsonpath='{.status.loadBalancer.ingress[0].ip}')
          if [ -z "$IP" ]; then
            echo "Ingress IP not assigned yet."
          else
            echo "Application should be accessible at: http://$IP"
          fi
        displayName: 'Show Ingress External IP'

      - script: |
          echo "Describing Backend pod for more insights..."
          POD_NAME=$(kubectl get pods -n $(NAMESPACE) -l app=backend-app -o jsonpath='{.items[0].metadata.name}')
          kubectl describe pod $POD_NAME -n $(NAMESPACE)
        displayName: 'Describe Backend Pod'

